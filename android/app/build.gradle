def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

apply plugin: 'com.android.application'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"

/*
The arcore aar library contains the native shared libraries.  These are
extracted before building to a temporary directory.
 */
def arcore_libpath = "${project.buildDir}/arcore-native"

// Create a configuration to mark which aars to extract .so files from
configurations { natives }

def setVersionName = { ->
    if (project.hasProperty("androidVersionName")) {
        println("Replacing versionName with supplied build parameter: " +
                "$androidVersionName")
        return androidVersionName
    } else {
        return "1.0"
    }
}

android {
    compileSdkVersion flutter.compileSdkVersion
    ndkVersion "21.4.7075529"

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    sourceSets {
        main.jniLibs.srcDirs = ["${project.rootDir}/libs/Oboe/jni"]
    }

    defaultConfig {
        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        applicationId "com.compal.cloudxr_flutter"
        // You can update the following values to match your application needs.
        // For more information, see: https://docs.flutter.dev/deployment/android#reviewing-the-build-configuration.
        minSdkVersion 26
        targetSdkVersion flutter.targetSdkVersion
        versionCode 1
        versionName setVersionName()

        externalNativeBuild {
            cmake {
                cppFlags "-std=c++1y", "-Wall"
                arguments "-DANDROID_STL=c++_shared",
                        "-DANDROID_ABI=arm64-v8a",
                        "-DARCORE_LIBPATH=${arcore_libpath}/jni",
                        "-DARCORE_INCLUDE=${project.rootDir}/libs/libraries/include",
                        "-DGLM_INCLUDE=${project.rootDir}/libs/libraries/glm",
                        "-DOBOE_LIBPATH=${project.rootDir}/libs/Oboe/jni",
                        "-DOBOE_INCLUDE=${project.rootDir}/libs/Oboe/include",
                        "-DCLOUDXR_LIBPATH=${project.rootDir}/libs/CloudXR/jni",
                        "-DCLOUDXR_INCLUDE=${project.rootDir}/libs/CloudXR/include",
                        "-DC_SHARED_INCLUDE=${project.rootDir}/../../../../shared"
            }
        }
        ndk {
            abiFilters 'arm64-v8a'
        }
    }

    signingConfigs {
        release {
            storeFile file('./dummy.jks')
            storePassword 'nvidia'
            keyAlias 'nvidia'
            keyPassword 'nvidia'
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            shrinkResources false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }
    externalNativeBuild {
        cmake {
            path "CMakeLists.txt"
        }
    }
    packagingOptions {
        pickFirst 'lib/x86/liboboe.so'
        pickFirst 'lib/armeabi-v7a/liboboe.so'
        pickFirst 'lib/arm64-v8a/liboboe.so'
    }
}

repositories {
    flatDir {
        dirs "${project.rootDir}/libs"
    }
}

flutter {
    source '../..'
}

dependencies {
    implementation 'com.google.ar:core:1.26.0'
//    natives 'com.google.ar:core:1.26.0' Change to extract aar

    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'com.google.android.material:material:1.0.0'
    implementation 'com.nvidia.CloudXRClient:CloudXR@aar'

    implementation project(path: ':libwebrtc')

//    provided 'com.google.auto.value:auto-value:1.8.1'
    annotationProcessor 'com.google.auto.value:auto-value:1.8.1'
}

// Extracts the shared libraries from aars in the natives configuration.
// This is done so that NDK builds can access these libraries.
task extractNativeLibraries() {
    // Always extract, this insures the native libs are updated if the version changes.
    outputs.upToDateWhen { false }
    doFirst {
        configurations.natives.files.each { f ->
            copy {
                from zipTree(f)
                into arcore_libpath
                include "jni/**/*"
            }
        }
    }
}

task extractArCore(type: Copy) {
    from zipTree("${project.rootDir}/libs/core-1.26.0.aar")
    into arcore_libpath
    include "jni/**/*"
}

tasks.whenTaskAdded {
    task-> if (task.name.contains("external") && !task.name.contains("Clean")) {
        task.dependsOn(extractNativeLibraries)
    }
}

preBuild.dependsOn(extractArCore)
preBuild.dependsOn(':extractOboe')
preBuild.dependsOn(':extractCloudXR')